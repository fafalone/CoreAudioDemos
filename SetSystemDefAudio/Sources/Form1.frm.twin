[FormDesignerId("C9193AF0-EA07-4517-8648-24394662AA99")]
[ClassId("391DC023-7BE2-441B-A9FB-E5AB0F2D342D")]
[InterfaceId("134EBF3B-0777-40A8-80BB-EEA3A0466B33")]
[EventInterfaceId("8C6C5037-C4E8-410D-98C8-572AED2AB3A2")]
Class Form1
    Attribute VB_Name = "Form1"
    Attribute VB_GlobalNameSpace = False
    Attribute VB_Creatable = False
    Attribute VB_PredeclaredId = True
    Attribute VB_Exposed = False
    Option Explicit
    Private pPolicyCfg As PolicyConfigClient
    
    Private Sub EnumRenderDevices()
    Dim sOut As String
    Dim i As Long
    Dim lp As LongPtr
    Dim s1 As String
    
    Dim pDvEnum As MMDeviceEnumerator
    Set pDvEnum = New MMDeviceEnumerator
    
    Dim pDvCol As IMMDeviceCollection
    
    pDvEnum.EnumAudioEndpoints eRender, DEVICE_STATE_ACTIVE, pDvCol
    
    If (pDvCol Is Nothing) = False Then
        Dim nCount As Long
        
        If pDvCol.GetCount(nCount) = S_OK Then
            For i = 0 To (nCount - 1)
                List2.AddItem GetDeviceName(pDvCol, i)
            Next
        Else
            Debug.Print "Failed to get device count."
        End If
    Else
        Debug.Print "Failed to enum endpoints."
    End If
    
    End Sub
    Private Sub EnumCaptureDevices()
    Dim sOut As String
    Dim i As Long
    Dim lp As Long
    Dim s1 As String
    
    Dim pDvEnum As MMDeviceEnumerator
    Set pDvEnum = New MMDeviceEnumerator
    
    Dim pDvCol As IMMDeviceCollection
    
    pDvEnum.EnumAudioEndpoints eCapture, DEVICE_STATE_ACTIVE, pDvCol
    
    If (pDvCol Is Nothing) = False Then
        Dim nCount As Long
        
        If pDvCol.GetCount(nCount) = S_OK Then
            For i = 0 To (nCount - 1)
                List1.AddItem GetDeviceName(pDvCol, i)
            Next
        Else
            Debug.Print "Failed to get device count."
        End If
    Else
        Debug.Print "Failed to enum endpoints."
    End If
    
    End Sub
    Private Function GetDeviceName(pCol As IMMDeviceCollection, nIdx As Long) As String
    Dim pDevice As IMMDevice
    Dim sID As String
    Dim pStore As IPropertyStore
    Dim pDesc As IPropertyDescription
    Dim lp As LongPtr
    Dim lpID As LongPtr
    Dim vrProp As Variant
    Dim vProp As Variant
    Dim j As Long
    If (pCol.Item(nIdx, pDevice)) = S_OK Then
        pDevice.GetId lpID
        sID = LPWSTRtoStr(lpID)
        Debug.Print "Got device(" & nIdx & ") id=" & sID
        If (sID = "") Or (sID = vbNullChar) Then
            Debug.Print "Invalid DeviceID"
            Exit Function
        End If
        pDevice.OpenPropertyStore STGM_READ, pStore
        If (pStore Is Nothing) = False Then
            'these property stores aren't as full-featured as other ones
            'such as those associated with IShellItem's of files.. for
            'example we can't use the superior PSFormatPropertyValue b/c
            'we can't get an IPropertyDescription, or a property name
            'So we're stuck using PropVariants, a nightmare in VB
            Dim pcnt As Long
            pStore.GetCount pcnt
            Debug.Print "prop cnt=" & pcnt
            Debug.Print "outputting propvariant..."
            Dim pk As PROPERTYKEY
            pStore.GetValue PKEY_Device_FriendlyName, vProp
            PropVariantToVariant vProp, vrProp
            Dim vte As VbVarType
            vte = VarType(vrProp)
            If (vte And vbArray) = vbArray Then 'this always seems to be vbString and vbArray, haven't encountered other types
                Debug.Print "PV type is array"
                For j = LBound(vrProp) To UBound(vrProp)
                    Debug.Print "Value(" & j & ")=" & CStr(vrProp(j))
                Next j
    
            Else
                Select Case vte
                    Case vbDataObject, vbObject, vbUserDefinedType
                        GetDeviceName = "<cannot display this type>"
                    Case vbEmpty, vbNull
                        GetDeviceName = "<empty or null>"
                    Case vbError
                        GetDeviceName = "<vbError>"
                    Case Else
                        GetDeviceName = CStr(vrProp) & "|" & sID
                End Select
            End If
    '        Debug.Print "enum pstore..."
    '        dbg_enumstore pStore
        Else
            Debug.Print "Failed to get IPropertyStore"
        End If
    Else
        Debug.Print "Failed to get device with pCol.Item, nIdx=" & nIdx
    End If
    
    End Function
    Private Function GetDeviceNameDirect(pDevice As IMMDevice) As String
    Dim sID As String
    Dim pStore As IPropertyStore
    Dim pDesc As IPropertyDescription
    Dim lp As LongPtr
    Dim lpID As LongPtr
    Dim vrProp As Variant
    Dim vProp As Variant
    Dim j As Long
        pDevice.GetId lpID
        sID = LPWSTRtoStr(lpID)
        Debug.Print "Got device id=" & sID
        If (sID = "") Or (sID = vbNullChar) Then
            Debug.Print "Invalid DeviceID"
            Exit Function
        End If
        pDevice.OpenPropertyStore STGM_READ, pStore
        If (pStore Is Nothing) = False Then
            'these property stores aren't as full-featured as other ones
            'such as those associated with IShellItem's of files.. for
            'example we can't use the superior PSFormatPropertyValue b/c
            'we can't get an IPropertyDescription, or a property name
            'So we're stuck using PropVariants, a nightmare in VB
            Dim pcnt As Long
            pStore.GetCount pcnt
            Debug.Print "prop cnt=" & pcnt
            Debug.Print "outputting propvariant..."
            Dim pk As PROPERTYKEY
            pStore.GetValue PKEY_Device_FriendlyName, vProp
            PropVariantToVariant vProp, vrProp
            Dim vte As VbVarType
            vte = VarType(vrProp)
            If (vte And vbArray) = vbArray Then 'this always seems to be vbString and vbArray, haven't encountered other types
                Debug.Print "PV type is array"
                For j = LBound(vrProp) To UBound(vrProp)
                    Debug.Print "Value(" & j & ")=" & CStr(vrProp(j))
                Next j
    
            Else
                Select Case vte
                    Case vbDataObject, vbObject, vbUserDefinedType
                        GetDeviceNameDirect = "<cannot display this type>"
                    Case vbEmpty, vbNull
                        GetDeviceNameDirect = "<empty or null>"
                    Case vbError
                        GetDeviceNameDirect = "<vbError>"
                    Case Else
                        GetDeviceNameDirect = CStr(vrProp) & "|" & sID
                End Select
            End If
    '        Debug.Print "enum pstore..."
    '        dbg_enumstore pStore
        Else
            Debug.Print "Failed to get IPropertyStore"
        End If
    
    
    End Function
    
    Private Sub Command1_Click()
    If List1.ListIndex = -1 Then
        MsgBox "Please select an audio device.", vbCritical + vbOKOnly, "SetDefAudio"
        Exit Sub
    End If
    If (pPolicyCfg Is Nothing) Then
        Set pPolicyCfg = New PolicyConfigClient
    End If
    
    Dim sID As String
    sID = Mid$(List1.List(List1.ListIndex), InStr(List1.List(List1.ListIndex), "|") + 1)
    Debug.Print "Set default: " & sID
    pPolicyCfg.SetDefaultEndpoint StrPtr(sID), eMultimedia
    pPolicyCfg.SetDefaultEndpoint StrPtr(sID), eCommunications
    
    End Sub
    
    Private Sub Command2_Click()
    If List2.ListIndex = -1 Then
        MsgBox "Please select an audio device.", vbCritical + vbOKOnly, "SetDefAudio"
        Exit Sub
    End If
    If (pPolicyCfg Is Nothing) Then
        Set pPolicyCfg = New PolicyConfigClient
    End If
    
    Dim sID As String
    sID = Mid$(List2.List(List2.ListIndex), InStr(List2.List(List2.ListIndex), "|") + 1)
    Debug.Print "Set default: " & sID
    pPolicyCfg.SetDefaultEndpoint StrPtr(sID), eMultimedia
    pPolicyCfg.SetDefaultEndpoint StrPtr(sID), eCommunications
    
    End Sub
    
    Private Sub Form_Load()
    EnumCaptureDevices
    EnumRenderDevices
     
    End Sub
    

End Class
